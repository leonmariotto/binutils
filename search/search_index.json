{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Summary","text":"<p>This repository intend to collect tools for binary exploitation. There is only an elf parser (readelf-like) elftool for now.</p> <p>Compilation is done through a Makefile which have some special rules : - misra: a static analysis pass is done a source code and a misra report is generated in build/misra_report.txt. - gcc_graph_tool: generate a callgraph of the binary.</p> <p>Also a unitary test system is present and some unit tests are implemented.</p>"},{"location":"elftool/","title":"elftool","text":"<p>This is a tool to parse binary and ouput information. It support nm output and can output detailed information about Ehdr, Phdr and Shdr.</p>"},{"location":"gcc_graph_tool/","title":"GCC graph tool","text":"<p>A submodule gcc_graph_tool in the repository enable callgraph creation at compile time. The tool use .cgraph output by GCC at IPA pass. TODO : - Link to tool website - Link to tool repo - Put the last CI svg output.</p>"},{"location":"unit_test/","title":"Unitary test","text":"<p>There is a unit_test.mk that is reponsible to build one single unit test, with variable controllable by the caller.</p> <p>The caller is run_unit_test.py which have a variable unit_list at the top of file.</p> <p>For each unit in unit list it will build, run, generate json and html report. Each json report is then merged into a super report that is output in html and xml (cobertura) form.</p> <p>Unit test sources use cmocka to output result in Junit format.</p>"}]}